language TreePPL

include "tppl-lexer-extensions.mc"

-- Basic tokens
token String {
  repr = StringRepr {},
  constructor = StringTok,
  fragment = StringTokenParser,
  ty = String,
}
token LIdent {
  repr = LIdentRepr {},
  constructor = LIdentTok,
  fragment = LIdentTokenParser,
  ty = String,
}
token UIdent {
  repr = UIdentRepr {},
  constructor = UIdentTok,
  fragment = UIdentTokenParser,
  ty = String,
}

-- Wrapping tokens that just change the type in the AST
token UName {
  base = UIdent,
  wrap = nameNoSym,
  ty = Name,
}
token LName {
  base = LIdent,
  wrap = nameNoSym,
  ty = Name,
}

token Integer {
  repr = IntRepr {},
  constructor = IntTok,
  fragment = UIntTokenParser,
  ty = Int,
}

token Real {
  repr = FloatRepr {},
  constructor = FloatTok,
  fragment = UFloatTokenParser,
  ty = Float,
}

token {fragment = OperatorTokenParser,}
token {fragment = CommaTokenParser,}
token {fragment = SemiTokenParser,}
token {fragment = BracketTokenParser,}

token {fragment = TpplLineCommentParser,}
token {fragment = TpplMultilineCommentParser,}
token {fragment = WhitespaceParser,}

type FileTppl
type DeclTppl
type TypeTppl
type Con
type StmtTppl
type ExprTppl { grouping = "(" ")", }

start FileTppl

/-
A TreePPL file consists of one more declarations.
-/
prod DeclSequence: FileTppl = decl:DeclTppl+

/-
Type usage
For now the type is only an Uppercase identifier, but in may
be something else in the future (like with type parameters, etc.)
Real
Real[]
Int[10]
-/
prod TypeUsage: TypeTppl = name:UName
prod TypeSequence: TypeTppl = ty:TypeTppl "[" "]"

-- NOTE(vsenderov, 2023-09-15) all other syntaxes are inadmissible by current parser
prod Tensor: TypeTppl = "Tensor" "[" ty:TypeTppl "]" 

--- Real[] -- sequence
--- Real[ _ ] -- one dim tensor
--prod Tensor: TypeTppl = ty:TypeTppl "("  ")" 

prod AtomicReal: TypeTppl = "Real"
prod AtomicBool: TypeTppl = "Bool"
prod AtomicInt: TypeTppl = "Int"
prod TpplStr: TypeTppl = "String"
prod Nothing: TypeTppl = "(" ")"

/-
A function is declared with the keyword function, optionally preceeded by "model"
it has zero or more arguments, all of which are type-annotated, it has an
optional return type, and the body is given in { }. It consists of statements.
-/
prod Fun: DeclTppl =
  model:"model"? "function" name:LName
  "(" (args:{name:LName ":" ty:TypeTppl} args:{"," name:LName ":" ty:TypeTppl}*)? ")"
  (":" returnTy:TypeTppl)?
  "{" body:StmtTppl* "}"

/-
A (type) constructor is similar to a function but needs to have at least one
argument, and does not have the optional postfix :SomeType
-/
prod TypeCon: Con =
 name:UName "{"( fields:{name:LIdent ":" ty:TypeTppl} ("," fields:{name:LIdent ":" ty:TypeTppl})*)? "}"

/- Here is how you declare a type -/
prod Type: DeclTppl =
  "type" name:UName "="
  ("|"? cons:Con)
  ("|" cons:Con)*




/-
Expressions
-/
prod Integer: ExprTppl = val:Integer
prod TpplString: ExprTppl = val:String
prod Real: ExprTppl = val:Real
prod Variable: ExprTppl = ident:LName
prod True: ExprTppl = "true"
prod False: ExprTppl = "false"
prod Sequence: ExprTppl = "[" (values:ExprTppl ("," values:ExprTppl)*)? "]"


-- infix left Addition: Expr = "+"
prod left Add: ExprTppl = left:ExprTppl "+" right:ExprTppl
-- infix Multiplication: Expr = "*"
prod left Mul: ExprTppl = left:ExprTppl "*" right:ExprTppl
-- inflix Subtraction: Expr = "-"
prod left Sub: ExprTppl = left:ExprTppl "-" right:ExprTppl
--prefix negative Numbers
prod Neg: ExprTppl = "-" right:ExprTppl
-- infix Division: Expr = "/"
prod left Div: ExprTppl = left:ExprTppl "/" right:ExprTppl
-- Power: Expr = "^"
prod left Power: ExprTppl = left:ExprTppl "^" right:ExprTppl

-- is
prod Is: ExprTppl = thing:ExprTppl "is" constructor:UName
-- to
prod To: ExprTppl = beginVal:ExprTppl "to" endVal:ExprTppl
-- Comparisons
prod left Less: ExprTppl = left:ExprTppl "<" right:ExprTppl
prod left Greater: ExprTppl = left:ExprTppl ">" right:ExprTppl
prod left LessEq: ExprTppl = left:ExprTppl "<=" right:ExprTppl
prod left GreaterEq: ExprTppl = left:ExprTppl ">=" right:ExprTppl
prod left Equal: ExprTppl = left:ExprTppl "==" right:ExprTppl -- currently implemented as floats which doesn't make much sense
prod left Unequal: ExprTppl = left:ExprTppl "!=" right:ExprTppl
-- Boolean operators
infix left And: ExprTppl = "&&"
infix left Or: ExprTppl = "||"
prefix Not: ExprTppl = "!"
-- List operations
postfix Subscript: ExprTppl = "[" idx:ExprTppl (":" lastIdx:ExprTppl)? "]"
-- Conversions, not sure this is actually what we want in the end
prod ConvIntToReal: ExprTppl = "Real" "(" val:ExprTppl ")"

-- Tensor/matrix expressions

-- matrix multiplication (dot product)
prod left MatrixMul: ExprTppl = left:ExprTppl "*@" right:ExprTppl -- owl standard

-- addition should be just + in the owl standard
prod left MatrixAdd: ExprTppl = left:ExprTppl "+@" right:ExprTppl 

prod left MatrixLeftScalarMul: ExprTppl = left:ExprTppl "$*" right:ExprTppl  -- owl standard (I think)
prod left MatrixRightScalarMul: ExprTppl = left:ExprTppl "*$" right:ExprTppl  -- 

prod left MatrixPower: ExprTppl = left:ExprTppl "^$" right:ExprTppl -- imagined but analogous to *$


  -- because the right has to be an integer not another matrix

-- Anonymous functions

prod AnonFun: ExprTppl = "function"
  "(" (args:{name:LName ":" ty:TypeTppl} args:{"," name:LName ":" ty:TypeTppl}*)? ")"
  "{" stmts:StmtTppl* "}"

-- Function call as expression
prod FunCall: ExprTppl = f:ExprTppl "(" (args:ExprTppl ("," args:ExprTppl)*)? ")"

prod Projection: ExprTppl = target:ExprTppl "." field:LIdent

precedence {
  Projection FunCall Subscript;
  Not Neg;
  Mul Div;
  Add Sub;
  ~Less Greater LessEq GreaterEq Equal Unequal;
  ~And Or;
}

-- Built-in distro keywords
prod Uniform: ExprTppl = "Uniform" "(" a:ExprTppl "," b:ExprTppl ")"
prod Bernoulli: ExprTppl = "Bernoulli" "(" prob:ExprTppl ")"
prod Exponential: ExprTppl = "Exponential" "(" rate:ExprTppl ")"
prod Gamma: ExprTppl = "Gamma" "(" shape:ExprTppl "," scale:ExprTppl ")"
prod Gaussian: ExprTppl = "Gaussian" "(" mean:ExprTppl "," dev:ExprTppl ")"
prod Poisson: ExprTppl = "Poisson" "(" rate:ExprTppl ")"
prod Beta: ExprTppl = "Beta" "(" a:ExprTppl "," b:ExprTppl ")"
prod Categorical: ExprTppl = "Categorical" "(" probs:ExprTppl ")"
prod Multinomial: ExprTppl = "Multinomial" "(" n:ExprTppl "," probs:ExprTppl ")"
prod Empirical: ExprTppl = "Empirical" "(" samples:ExprTppl ")"
prod Dirichlet: ExprTppl = "Dirichlet" "(" alphas:ExprTppl ")"
prod Binomial: ExprTppl = "Binomial" "(" n:ExprTppl "," prob:ExprTppl ")"


prod Record: ExprTppl = "{" ((key:LName ("=" value:ExprTppl)?) ("," key:LName ("=" value:ExprTppl)?)*)? "}"
prod Constructor: ExprTppl =
  name:UName "{"
  (fields:{key:LIdent ("=" value:ExprTppl)?} fields:{"," key:LIdent ("=" value:ExprTppl)?}*)?
  "}"

/----- Statements -----/
prod ExprStmtTppl: StmtTppl = e:ExprTppl ";" -- Epxressions as statements
prod Assume: StmtTppl = "assume" randomVar:LName (":" ty:TypeTppl)? "~" dist:ExprTppl ";"
prod Assign: StmtTppl = "let" var:LName (":" ty:TypeTppl)? "=" val:ExprTppl ";"
--prod Observe: StmtTppl = "observe" value:ExprTppl "~" distribution:UName "(" (args:ExprTppl ("," args:ExprTppl)*)? ")"
prod Observe: StmtTppl = "observe" value:ExprTppl "~" dist:ExprTppl ";"
prod Resample: StmtTppl = "resample" ";"
prod If: StmtTppl = "if" condition:ExprTppl "{" ifTrueStmts:StmtTppl* "}" ("else" "{" ifFalseStmts:StmtTppl* "}")?
prod Weight: StmtTppl = "weight" value:ExprTppl ";"
prod LogWeight: StmtTppl = "logWeight" value:ExprTppl ";"
prod ForLoop: StmtTppl = "for" iterator:LName "in" range:ExprTppl "{" forStmts:StmtTppl* "}"
prod Return: StmtTppl = "return" return:ExprTppl? ";"

prod Print: StmtTppl = "dump" "(" printable:ExprTppl ")" ";"
