// This script proposes events from one process
// and then computes the probability of that
// proposal from the model and finally
// corrects for the proposals.
var mymodel = function() {

  // Switch rates
  var r_0 = 3.0
  var r_1 = 1.0

  // Propose rates
  var p_0 = 2.6
  var p_1 = 1.4
  
  var start_state = 0
  var stop_state  = 1

  var start_time = 1.0
  var stop_time  =  0.0
  
  var res = propose_event(start_state,stop_state,start_time,stop_time,p_0,p_1)

//  console.log(res)

  var n_events = res.switch_times.length - 1

  var log_score = sim_event(start_state,start_time,stop_time,0,res.switch_times,r_0,r_1)

//  console.log(log_score, res.log_debt)

  factor (log_score-res.log_debt)

  return n_events
}

var propose_event = function(state, stop_state, start_time, stop_time, r_0, r_1) {

  var rate = (state == 0 ? r_0 : r_1 )
  
  var t = (state != stop_state ? sample_exp_max_t(rate, start_time - stop_time) :
           sample( Exponential({a: rate})))
  
  var new_time = start_time - t

//  console.log(t, log_debt, state, stop_state, start_time, stop_time)

  if (new_time < stop_time) {
    var log_poisson_debt = Poisson({mu: rate*(start_time-stop_time)}).score(0)
    return { log_debt: log_poisson_debt, switch_times: [new_time]}
  }

  var log_debt = Exponential({a: rate}).score(t)  

  var res = propose_event(1 - state, stop_state, new_time, stop_time, r_0, r_1)

//  console.log(res)

  return {log_debt: (res.log_debt + log_debt), switch_times: [new_time].concat(res.switch_times)}
}

var sample_exp_max_t = function(rate, max_time) {
  
  var a = Math.exp(-rate*max_time)
  var u = sample( Uniform({a: a, b:1.0}) )
  
  factor (-Uniform({a:a,b:1.0}).score(u))
  return (-Math.log(u) / rate)
}

var sim_event = function(state, time, stop_time, index, events, r_0, r_1) {

  if (index >= events.length)
    return 0.0
  
  var rate = (state == 0 ? r_0 : r_1)

  var t = time - events[index]

//  console.log(t, time, events[index])

  var log_score = (index==events.length-1 ? Poisson({mu: rate*(time-stop_time)}).score(0) : Exponential({a: rate}).score(t))

  return log_score + sim_event(1-state, events[index], stop_time, index+1, events, r_0, r_1)
}

var dist = Infer({method:'SMC',particles:100000,model:mymodel})
dist.normalizationConstant

