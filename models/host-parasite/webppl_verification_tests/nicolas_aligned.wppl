// Sophisticated sampling of events from a Markov process
// on a binary state space (0,1), conditioned on start and
// end states. Here we make sure that no particles die out
// because the end state is wrong. This provides an example
// of a propose and repay mechanism.

// This is an aligned version, that is, we do not factor in
// the debts until at the end, when all particles are aligned.
var mymodel = function() {

  // Rate matrix, we want to infer pi_0 and pi_1
  var r_0 = 3.0
  var r_1 = 1.0
  
  var start_state = 0
  var stop_state  = 1
  
  var start_time = 1.0
  var stop_time  =  0.0
  
  var res = sim_event(start_state,stop_state,start_time,stop_time, r_0, r_1)
  
  factor (-res.log_debt)

  return res.n_events
}

var sim_event = function(state, stop_state, start_time, stop_time, r_0, r_1) {

  var rate = (state == 0 ? r_0 : r_1 )
  
//  var t = sample( Exponential({a: rate}) )
  var t = (state != stop_state ? sample_exp_max_t(rate, start_time - stop_time) :
           sample( Exponential({a: rate})))
  
  var log_debt = (state != stop_state ? log_debt_exp_max_t(rate, start_time-stop_time) : 0.0)

  var new_time = start_time - t

  if (new_time < stop_time) {

//    if (state != stop_state)
//      condition (1===0)

    return {n_events: 0, log_debt: log_debt}
  }

  var res = sim_event( 1 - state, stop_state, new_time, stop_time, r_0, r_1 )

  return ({n_events: res.n_events+1, log_debt: res.log_debt+log_debt})
}

var sample_exp_max_t = function(rate, max_time) {
  
  var a = Math.exp(-rate*max_time)
  var u = sample( Uniform({a: a, b:1.0}) )
  
  return (-Math.log(u) / rate)
}

var log_debt_exp_max_t = function(rate, max_time) {

  var a = Math.exp(-rate*max_time)
  return Math.log(1.0/(1.0-a))
}


var dist = Infer({method:'SMC',particles:10000,model:mymodel})
dist.normalizationConstant

