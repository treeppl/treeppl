/*
 * Library of drift kernels emulating the drift kernels from the RevBayes implementation
 */

function simplexMove(x: Real[], alpha: Real, epsilon: Real) => Dist[Real[]] {
  /*
   * Drift kernel for Dirichlet distribution aka. probability simplex 
   *
   * Proposes from a different Dirichlet distribution centered at the previous value.
   * The `alpha` parameter is the sum of the rates for each parameter and thus
   * controls the width of the distribution (large alpha -- narrow distribution)
   * 
   * Due to numerical errors, if the distribution goes to closely to one of the 
   * boundaries the OWL Dirichlet distribution might sample values on the 
   * boundary. This crashes the program. To avoid the situation we perturb the
   * current value so it falls safely in the interior of the simplex
   * 
   * RevBayes source at:
   * https://github.com/revbayes/revbayes/blob/master/src/core/moves/proposal/simplex/DirichletSimplexProposal.cpp
   *
   */
  let newParamFun = function (a: Real) => Real {
    if a > epsilon {
      if a < 1. - epsilon {
        return a * alpha;
      } else {
        return (a - epsilon) * alpha;
      }
    } else {
      return (a + epsilon) * alpha;
    }
  };
  let newParams = sapply(x, newParamFun);
  return Dirichlet(newParams);
}

function scaleMove(x: Real, lambda: Real) => Dist[Real] {
  /*
   * Drift kernel for distributions with support on positive real axis
   * (like exponential r.v.s)
   *
   * In the original RevBayes implementation the move samples u ~ U[-0.5, 0.5]
   * and returns x * exp(-lambda * u). This corresponds to a reciprocal (log-uniform)
   * distribution on the interval [x exp(-lambda / 2), x exp(lambda / 2)]
   * 
   * RevBayes source at:
   * https://github.com/revbayes/revbayes/blob/master/src/core/moves/proposal/scalar/ScaleProposal.cpp
   *
   */
  return Reciprocal(x * exp(-lambda / 2.), x * exp(lambda / 2.));
}

function categoricalShiftKernel(
  x: Int,
  param: Real[],
  lambda: Real,
  errMargin: Real
) => Dist[Int] {
  /*
   * This returns a categorical distribution where some weight is shifted
   * from the current value. Sampling of categorical variables is handled
   * differently by RevBayes and cannot be emulated in TreePPL in a natural
   * way
   */ 
  let currProb = param[x + 1];
  if currProb < 1. - errMargin {
    let nextProb = currProb * (1. - lambda);
    let newParam = sapply(
      range(1, length(param), 1), 
      function (i: Int) => Real {
        if i == x {
          return nextProb;
        } else {
          return param[i + 1] * (1. - nextProb) / (1. - currProb);
        }
      }
    );
    return Categorical(newParam);
  } else {
    return Categorical(param);
  }
}
