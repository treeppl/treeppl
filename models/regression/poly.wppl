var data = [
  {x: 1, y: 2},
  {x: 2, y: 4},
  {x: 3, y: 6},
  {x: 4, y: 8},
  {x: 5, y: 10}
];

// quadratic data
var quadraticData = [
  {x: 1, y: 1 + 1 * Math.pow(1, 2)},
  {x: 2, y: 1 + 1 * Math.pow(2, 2)},
  {x: 3, y: 1 + 1 * Math.pow(3, 2)},
  {x: 4, y: 1 + 1 * Math.pow(4, 2)},
  {x: 5, y: 1 + 1 * Math.pow(5, 2)}
];

// Cubic data: y = a + bx^3
var cubicData = [
  {x: 1, y: 1 + 1 * Math.pow(1, 3)},
  {x: 2, y: 1 + 1 * Math.pow(2, 3)},
  {x: 3, y: 1 + 1 * Math.pow(3, 3)},
  {x: 4, y: 1 + 1 * Math.pow(4, 3)},
  {x: 5, y: 1 + 1 * Math.pow(5, 3)}
];

// Define the polynomial function
var polynomialFunction = function(coeff, x) {
  // Helper function to recursively calculate the polynomial
  var calculatePolynomial = function(index, coeff, x) {
    if (index >= coeff.length) {
      return 0;
    } else {
      return coeff[index] * Math.pow(x, index) + calculatePolynomial(index + 1, coeff, x);
    }
  };

  // Call the helper function to calculate the polynomial
  return calculatePolynomial(0, coeff, x);
};

// Define the model
var model = function() {
  // Sample the degree of the polynomial from a Poisson distribution
  var n = sample(Poisson({mu: 1}))
  // Sample the coefficients
  var coeffs = mapN(function() { return gaussian(0, 1); }, n + 1);
  var sigma = 1; // noise

  // Likelihood
  var likelihood = function(datum) {
    var predictedY = polynomialFunction(coeffs, datum.x);
    observe(Gaussian({mu: predictedY, sigma: sigma}), datum.y)
  };

  // Observe the data
  mapData({data: data}, likelihood);

  return n;
};

// Perform inference
var numberOfSamples = 1000;
var samples = Infer({method: 'MCMC', samples: 1000, burn: 10000}, model);

// Display the results
samples