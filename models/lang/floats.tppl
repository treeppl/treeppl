
type GaussParam = GaussParam {
  mean: Real,
  std: Real
}

function sampleGaussian(p: GaussParam) : Real {
  assume x ~ Gaussian(p.mean, p.std);
  return x;
}


// Real[[]] Tensor[Real]

Real[ , , , ]

Real [[  , , , ]]

model function f() : Real[] {

  // let myVec = rvecCreate(5, [0., 0., 0., 0., 0.]);
  // for i in 1 to 5 {
  //   assume x ~ Gaussian(0.0, 1.0);
  //   matrixSet(1, i, myVec, x);
  // }

  let seq = [ GaussParam {mean = 0., std = 1.}
            , GaussParam {mean = 0., std = 1.}
            , GaussParam {mean = 0., std = 1.}
            ];

  let rVal = apply(sampleGaussian, seq);

  let rVal = iid(sampleGaussian, GaussParam {mean = 0., std = 1.}, 100);

  assume iid 50 rVal ~ Gaussian (0.0, 1.0)

  iid_assume 50 rval ~ Gaussian (0.0, 1.0);

  assume rval ~ 50 * Gaussian (0.0, 1.0);

  return rVal;
}







