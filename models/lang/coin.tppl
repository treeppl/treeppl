/*
 * File: coin.tppl
 * Description: Simplest meaningful probabilistic program. Evaluates how likely it is that a coin is fair, given data.
 * Compilation:
 *   tpplc models/lang/coin.tppl models/data/examples.mc out.mc && mi compile out.mc
 * Execution: ./out 100 1
 */

/**
 * Conditions the likelihood of the computation 
 *   on an observed datapoint to come from a particular Bernoulli experiment 
 * Parameters:
 *   datapoint: Real
 *   probability: Real in (0, 1), the probability of True in the Bernoulli experiment
 * Returns: nothing
 * Side-effects: reweighs the computation
 */
function flip(datapoint: Bool, probability: Real) {
  observe datapoint ~ Bernoulli(probability);
}

/*
 * Model function
 * Data:
 *   coinflips: Bool[]
 * Prior: 
 *   p ~ Beta(2, 2)
 * Posterior:
 *   p | coinflips
 */
model function coinModel(coinflips: Bool[]) : Real  {
  // Uncomment if you want to test the input
  //printLn("Input:");
  //let coinStr = apply(bool2string, coinflips);
  //printLn(join(coinStr));
  assume p ~ Beta(2.0, 2.0); // prior
  let n = length(coinflips);
  for i in 1 to n {
    flip(coinflips[i], p); // likelihood
  }
  return(p); // posterior
}
