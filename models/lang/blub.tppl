/*
 * File: blub.tppl
 * Description: Program to showcase data manipulation.
 */

function example(a: Int, b: Int) => Int {
  return a + b;
}
function example3(a: Int, b: Int, c: Int) => Int {
  return a + b + c;
}

/*
 * Model function
 * Parameters:
 *   n: Int
 *   pi: Real
 *   trump: Bool
 *   coinflips: Bool[]
 *   text: String
 * Returns: nothing
 * Side-effect: prints things
 */
model function blub(n: Int, pi: Real, trump: Bool, coinflips: Bool[], text: String) => () {
  printLn(text);
  print(text);

  printLn(int2string(n));
  printLn(real2string(pi)); // will print only a few decimals
  printLn(bool2string(true));

  printLn(concat("Trump was elected: ", bool2string(trump)));

  let testVec = [1, 2];
  printLn(int2string(testVec[1]));
  printLn(int2string(testVec[2]));

  let coinFlipStr = sapply(coinflips, bool2string);
  printLn(concat("The length of the vector is ", int2string(length(coinflips))));
  let y = paste0(coinFlipStr); //cannot use concat on more than two argumnets
  printLn(y);

  printLn("Arithmetic");
  printLn(real2string(2.0 + 3.0));
  printLn(int2string(2 + 3));
  printLn(real2string(2.0 * 3.0));
  printLn(int2string(2 * 3));
  printLn(real2string(2.0 / 3.0));
  printLn(int2string(2 / 3));
  printLn(real2string(2.0 - 3.0));
  printLn(int2string(2 - 3));
  printLn(real2string(2.0 ^ 3.0));

  printLn("Lt");
  printLn(bool2string(2.0 < 3.0));
  printLn(bool2string(2.0 <= 3.0));
  printLn(bool2string(2 < 3.0));
  printLn(bool2string(2 <= 3.0));
  printLn(bool2string(2.0 < 3));
  printLn(bool2string(2.0 <= 3));
  printLn(bool2string(2 < 3));
  printLn(bool2string(2 <= 3));
  printLn("Eq");
  printLn(bool2string(2.0 == 3.0));
  printLn(bool2string(2 == 3));
  printLn("Gt");
  printLn(bool2string(2.0 >= 3.0));
  printLn(bool2string(2.0 > 3.0));
  printLn(bool2string(2 >= 3.0));
  printLn(bool2string(2 > 3.0));
  printLn(bool2string(2.0 >= 3));
  printLn(bool2string(2.0 > 3));
  printLn(bool2string(2 >= 3));
  printLn(bool2string(2 > 3));

  printLn("And");
  printLn(bool2string(true && true));
  printLn(bool2string(true && false));
  printLn(bool2string(false && true));
  printLn(bool2string(false && false));

  printLn("Or");
  printLn(bool2string(true || true));
  printLn(bool2string(true || false));
  printLn(bool2string(false || true));
  printLn(bool2string(false || false));

  printLn("Not");
  printLn(bool2string(!false));
  printLn(bool2string(!true));

  let add2 = example(_, 2);
  printLn(int2string(add2(1)));
  printLn(int2string(add2(6)));

  let add2and3 = example3(_, _, 3);
  printLn(int2string(add2and3(1, 2)));
  printLn(int2string(add2and3(6, 2)));

  for i in 1 to 10 {
    if i > 5.0 {
      print("\n");
      printLn(paste0([int2string(i), " is more than ", real2string(5.0)]));
      return;
    } else {
      print(".");
    }
  }
}
