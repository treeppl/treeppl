// TreePPL script for tree inference under the
// Jukes Cantor model with a strict clock prior. Pruning currently hard-coded.

// Run this by compiling: 
// tpplc models/phylo/phylogeny/tree_inference_pruning_scaled.tppl -m 'smc-apf' --resample align --output phylo_scaled
// And then execution 10000 particles 1 sweep, using for example toy dataset phylo_toydata2.json:
// ./phylo_scaled models/data/treeinference/phylo_toydata2.json 10000 1 > phylo_pruning_scaled.json

// Toy dataset as json file phylo_toydata2.json.
// Data is a matrix with each row
// consisting of the aligned DNA sequence for a single
// taxon. The nucleotide is specified as
//   "A" for adenine  - 0
//   "C" for cytosine  - 1
//   "G" for guanine - 2
//   "T" for thymine - 3

// TYPES

type Tree =
  | Leaf {age: Real, index: Int, msg: Tensor[Real][]}
  | Node {age: Real, msg: Tensor[Real][], left: Tree, right: Tree}


// FUNCTIONS

// Randomly sample two indices in the trees vector, to be combined
function pickpair(n: Int): Int[] { 
    assume i ~ Categorical(rep(n, 1./Real(n)));  
    assume j ~ Categorical(rep(n, 1./Real(n)));  
    if (eqi(j, i)) { 
        return pickpair(n); 
    }
    return [addi(i, 1), addi(j, 1)]; //adding 1 to avoid index 0
}

// Build forest of trees from leaves, recursively
function build_forest(data: Int[][], forest: Tree[], index: Int, data_len: Int, seq_len: Int): Tree[] { 
    let new_message = sapply(data[index], get_leaf_message); 
    let new_leaf = Leaf{age = 0.0, index = index, msg =  new_message}; 
    let new_forest = join([forest, [new_leaf]]);
    if (eqi(data_len, index)) {
        return new_forest; 
    }
    else {
        return build_forest(data, new_forest, addi(index, 1), data_len, seq_len);
    }
}

// Get message from leaves for each site
function get_leaf_message(seq: Int) : Tensor[Real] {
    if (eqi(seq, 0)) { // "A"
       let message = rvecCreate(4, [1.0, 0.0, 0.0, 0.0]);
        return message;
    } 
    if (eqi(seq, 1)) { // "C"
        let message = rvecCreate(4, [0.0, 1.0, 0.0, 0.0]);
        return message;
    } 
    if (eqi(seq, 2)) { // "G"
        let message = rvecCreate(4, [0.0, 0.0, 1.0, 0.0]);
        return message;
    } 
    if (eqi(seq, 3)) {  // "T"
        let message = rvecCreate(4, [0.0, 0.0, 0.0, 1.0]);
        return message;
    } 
    else {
        return error("Invalid state at leaf");
    }
}     

// Get factor for each site
function get_factor(msg: Tensor[Real]): Real {
    let factor = mtxGet(1, 1, msg) + mtxGet(1, 2, msg) + mtxGet(1, 3, msg) + mtxGet(1, 4, msg);
    return factor;
} 

// Normalise message for each site
function norm_mess(msg: Tensor[Real]): Tensor[Real] {
    let factor = mtxGet(1, 1, msg) + mtxGet(1, 2, msg) + mtxGet(1, 3, msg) + mtxGet(1, 4, msg);
    let norm_msg = rvecCreate(4, [mtxGet(1, 1, msg)/factor, mtxGet(1, 2, msg)/factor, mtxGet(1, 3, msg)/factor, mtxGet(1, 4, msg)/factor]); 
    return norm_msg;
} 


// KEY FUNCTION: CLUSTER
function cluster(q: Tensor[Real], trees: Tree[], maxAge: Real, seq_len: Int): Tree[] {
    
    let n = length(trees);
    
    // Check if we have reached the root of the tree
    if (eqi(n, 1)) {
        
        // Stationarity at root
        let stationary = rep(seq_len, 0.25);
        logWeight (seqSumReal(sapply(stationary, log)));  

        return trees;
    }

    // Randomly sample two indices in the trees vector with function pickpair
    // We will combine these, named left and right child
    let pairs = pickpair(n);
    let left_child = trees[pairs[1]];
    let right_child = trees[pairs[2]];

    // Get the age of the new internal node
    assume t ~ Exponential(10.0);
    let age = maxAge + t;
    
    // Get incoming messages from children
    let tmatrix_left = mtxTrans(mtxExp(mtxSclrMul(age-left_child.age, q)));    
    let tmatrix_right = mtxTrans(mtxExp(mtxSclrMul(age-right_child.age, q)));
  
    let left_in_msg  = sapply1(left_child.msg, mtxMul, tmatrix_left);
    let right_in_msg = sapply1(right_child.msg, mtxMul, tmatrix_right);

    // Get the message of the new node
    let node_msg = messageElemMul(left_in_msg, right_in_msg); 
    
    // Get scaling factors
    let factors = sapply(node_msg, get_factor); 
    
    // Normalize the rescaled node message
    let node_msg_norm = sapply(node_msg, norm_mess);

    // Weights
    logWeight (seqSumReal(sapply(factors, log)));  

    // Combine picked pair of trees into a new node
    let parent = Node{age=age, msg=node_msg_norm, left=left_child, right=right_child};  

    // Compute new_trees list
    let min = mini(pairs[1], pairs[2]);  
    let max = maxi(pairs[1], pairs[2]); 
    let new_trees = join([slice(trees, 1, min), slice(trees, addi(min, 1), max), slice(trees, addi(max, 1), addi(n, 1)), [parent]]);

    // Recursive call to cluster for new_trees
    return cluster(q, new_trees, age, seq_len);
}

// MODEL FUNCTION

model function myModel(data: Int[][]) : Tree[] {
    // Define the scaled rate matrix for Jukes-Cantor
    let q = mtxCreate(4,4,
        [     -1.0, (1.0/3.0), (1.0/3.0), (1.0/3.0),
        (1.0/3.0),      -1.0, (1.0/3.0), (1.0/3.0),
        (1.0/3.0), (1.0/3.0),      -1.0, (1.0/3.0),
        (1.0/3.0), (1.0/3.0), (1.0/3.0),      -1.0]
        );           

    let data_len = length(data);
    let seq_len =  length(data[1]);

    // Define the initial trees sequence (containing the leaves)
    let trees = build_forest(data, [], 1, data_len, seq_len);

    // Build the tree by random clustering and return 
    return cluster(q, trees, 0.0, seq_len);
}