// Naive sampling of events from a Markov process
// on a binary state space (0,1), conditioned on start
// and end states. Some particles die because the
// end state is wrong.
var mymodel = function() {

  // Switch rates
  var r_0 = 3.0
  var r_1 = 1.0
  
  var start_state = 0
  var stop_state  = 1
  
  var start_time = 1.0
  var stop_time  =  0.0
  
  var n_events = sim_event(start_state,stop_state,start_time,stop_time, r_0, r_1)
  
  return n_events
}

var sim_event = function(state, stop_state, start_time, stop_time, r_0, r_1) {

  var rate = (state == 0 ? r_0 : r_1 )
  
  var t = sample( Exponential({a: rate}) )
  
  var new_time = start_time - t

  if (new_time < stop_time) {

    if (state != stop_state)
      condition (0==1)
  
    return 0
  }

  return 1 + sim_event( 1 - state, stop_state, new_time, stop_time, r_0, r_1 )
}

var sample_exp_max_t = function(rate, max_time) {
  
  var a = Math.exp(-rate*max_time)
  var u = sample( Uniform({a: a, b:1.0}) )
  
  factor (-Uniform({a:a,b:1.0}).score(u))
  return (-Math.log(u) / rate)
}

var dist = Infer({method:'SMC',particles:10000,model:mymodel})
dist.normalizationConstant

