type Tree =
    | Leaf{age: Real, label: String}
    | Node{age: Real, left: Tree, right: Tree, label: String}

// Event type used to store information about one host-repertoire change
// We keep the from_state here just in case we want to use it for debugging
type Event = Event{age: Real, host: Int, from_state: Int, to_state: Int}

// History point type used to store repertoire snapshots at the repertoire
// start ages repertoire start age = time of the event that led to that
// combination
type HistoryPoint = HistoryPoint{age: Real, repertoire: Int[]}

// Tree decorated with ancestral host repertoires and branch repertoire histories
type HistoryTree =
  | HistoryLeaf{age: Real, label: String, repertoire: Int[], history: HistoryPoint[]}
  | HistoryNode{age: Real, label: String, repertoire: Int[], history: HistoryPoint[],
                left: HistoryTree, right: HistoryTree}

model function mymodel(parasite_tree: Tree, ntips: Int, nhosts: Int, interactions: String[],
  host_distances: Real[], d_average: Real, tune: Real): Tree {
    //let myHistoryTree = HistoryLeaf {age = 10.0, label = "bbb", repertoire = [1,2], history = [HistoryPoint{age = 12.0, repertoire = [1,2]}]};
    return parasite_tree;
}
