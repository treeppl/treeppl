type Globals = Globals {
  logInitSplitRate : Real,
  logActivity : Real,
  logTurnoverRate : Real,
  rateVariance : Real,
  observeProb : Real
}

type SpecTree =
  | Node {left : SpecTree, right : SpecTree, age : Real}
  | Leaf {age : Real}

function new_rate(g: Globals, logSplitRate: Real): Real {
  assume newRate ~ Gaussian(logSplitRate, g.rateVariance);
  return g.logActivity + newRate;
}

function min(a: Real, b: Real): Real {
  if a <= b {
    return a;
  }
  return b;
}

function max(a: Real, b: Real): Real {
  if a <= b {
    return b;
  }
  return a;
}

function survives(g: Globals, age: Real, logSplitRate: Real): Bool {
  if log(100000.0) <= logSplitRate - g.logInitSplitRate {
    // We have a really high splitrate, which makes us blow the stack,
    // so abort this execution, assuming we'll survive
    return true;
  }

  let logEndRate = g.logTurnoverRate + logSplitRate;
  assume split ~ Exponential(exp(logSplitRate));
  assume end ~ Exponential(exp(logEndRate));

  if age - min(split, end) <= 0.0 {
    // Next event is after the present, i.e., we survive, i.e., we're
    // not extinct

    // However, we might still be unobserved, which would be
    // observationally equivalent to being extinct
    assume survives ~ Bernoulli(g.observeProb);
    return survives;
  }
  if split <= end {
    // We split here, and both branches must go extinct
    let nextAge = age - split;
    if survives(g, nextAge, new_rate(g, logSplitRate)) {
      return true;
    }
    return survives(g, nextAge, new_rate(g, logSplitRate));
  }
  // We went extinct
  return false;
}

function observeExtinct(g: Globals, age: Real, logSplitRate: Real): Bool {
  if survives(g, age, logSplitRate) {
    // We survived, but we wanted to be extinct
    weight 0.0;
    return false;
  }
  return true;
}

function observeTree(g: Globals, age: Real, logSplitRate: Real, tree: SpecTree) {
  if log(100000.0) <= logSplitRate - g.logInitSplitRate {
    // We have a really high splitrate, which makes us blow the stack,
    // so abort this execution
    weight 0.0;
    // resample;
    return;
  }

  // A split happens at some point
  assume split ~ Exponential(exp(logSplitRate));

  // No extinctions happen before that (or before the next node,
  // whichever comes first)
  let logEndRate = g.logTurnoverRate + logSplitRate;
  observe 0 ~ Poisson(exp(logEndRate) * min(split, age - tree.age));

  let ageAfterSplit = age - split;
  if ageAfterSplit > tree.age {
    // Split happens before the next node, i.e., one of the branches
    // must go fully exctinct

    // We don't know which one; either choice will produce the same
    // pruned tree. Thus we *should* technically try both and add the
    // two probabilities together. Unfortunately, we don't have a
    // language construct that means "run these two things, sum their
    // probabilities and incorporate into the weight." However, since
    // the parameters given to the functions are the same it suffices
    // to run one and double its probability. This follows from the
    // linearity of expectations.
    weight 2.0;

    // First branch goes extinct (resp. second)
    if observeExtinct(g, ageAfterSplit, new_rate(g, logSplitRate)) {
      // The second branch must be the tree we're observing
      // (resp. first)
      return observeTree(g, ageAfterSplit, new_rate(g, logSplitRate), tree);
    }
    resample;

  } else {
    // We get here with probability
    // P(neither split nor extinct before tree.age)

    if tree is Node {
      // We must split right now
      observe 0.0 ~ Exponential(exp(logSplitRate));
      resample;

      observeTree(g, tree.age, new_rate(g, logSplitRate), tree.left);
      observeTree(g, tree.age, new_rate(g, logSplitRate), tree.right);
    } else {
      if tree is Leaf {
        // Extinct or present day
        if tree.age > 0.0 {
          // Went extinct before present day, i.e., cannot be observed.
          weight 0.0;
        }
        observe true ~ Bernoulli(g.observeProb);
        resample;
      }
    }
  }
}

function countLeaves(tree: SpecTree): Real {
  if tree is Node {
    return 1.0 + countLeaves(tree.left) + countLeaves(tree.right);
  }
  return 1.0;
}

function logFactorial(n: Real): Real {
  if n <= 0.0 {
    return 0.0;
  }
  return log(n) + logFactorial(n - 1.0);
}

model function top(tree: SpecTree, rho: Real): Real {
  assume lambda ~ Gamma(1.0, 1.0);
  assume mu ~ Gamma(1.0, 0.5);
  assume sigma ~ Gamma(1.0, 1.0);
  let sigma = sqrt(0.2 / sigma);
  let sigma = 0.2 / sigma;
  assume log_alpha ~ Gaussian(0.0, sigma);
  let g = Globals {
    logInitSplitRate = log(lambda),
    logActivity = log_alpha,
    logTurnoverRate = log(mu/lambda),
    rateVariance = sigma,
    observeProb = rho
  };
  let numLeaves = countLeaves(tree);
  logWeight log(2.0) * (numLeaves - 1.0) - logFactorial(numLeaves);
  observeTree(g, tree.age, new_rate(g, log(lambda)), tree.left);
  observeTree(g, tree.age, new_rate(g, log(lambda)), tree.right);
  return lambda;
}
