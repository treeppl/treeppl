// TreePPL script for tree inference under the
// Jukes Cantor model with a strict clock prior. Pruning currently hard-coded.

// The nucleotide is specified as
//   "A" for adenine  - 0
//   "C" for cytosine  - 1
//   "G" for guanine - 2
//   "T" for thymine - 3
//   "-" for gaps - 4 

// TYPES

type MsgTree =
  | Leaf {age: Real, index: Int, msg: Matrix[Real][]}
  | Node {age: Real, msg: Matrix[Real][], left: MsgTree, right: MsgTree}



// FUNCTIONS

// Randomly sample two indices in the trees vector, to be combined. Avoiding mirror cases.
function pickpair(n: Int): Int[] {
    assume i ~ Categorical(rep(n, 1./Real(n)));
    let i = i + 1;
    assume j ~ Categorical(rep(subi(n, 1), 1./Real(subi(n, 1))));
    let j = j+1;
    if (j < i) { return [i, j];}
    else { return [i,j+1];}
}

// Build forest of trees from leaves, recursively
function build_forest(data: Int[][], forest: MsgTree[], index: Int, data_len: Int, seq_len: Int): MsgTree[] {
    let new_message = sapply(data[index], get_leaf_message);
    let new_leaf = Leaf{age = 0.0, index = index, msg =  new_message};
    let new_forest = paste0([forest, [new_leaf]]);
    if (eqi(data_len, index)) {
        return new_forest;
    }
    else {
        return build_forest(data, new_forest, addi(index, 1), data_len, seq_len);
    }
}

// Get message from leaves for each site
function get_leaf_message(seq: Int) : Matrix[Real] {
    if (eqi(seq, 0)) { // "A"
       let message = rvecCreate(4, [1.0, 0.0, 0.0, 0.0]);
        logWeight (log(0.25));
        return message;
    }
    if (eqi(seq, 1)) { // "C"
        let message = rvecCreate(4, [0.0, 1.0, 0.0, 0.0]);
        logWeight (log(0.25));
        return message;
    }
    if (eqi(seq, 2)) { // "G"
        let message = rvecCreate(4, [0.0, 0.0, 1.0, 0.0]);
        logWeight (log(0.25));
        return message;
    }
    if (eqi(seq, 3)) {  // "T"
        let message = rvecCreate(4, [0.0, 0.0, 0.0, 1.0]);
        logWeight (log(0.25));
        return message;
    }
    if (eqi(seq, 4)) {  // "-"
        let message = rvecCreate(4, [1.0, 1.0, 1.0, 1.0]);
        return message;
    }
    else {
        return error("Invalid state at leaf");
    }
}

function mini(a: Int, b: Int): Int {
  if a <= b {
    return a;
  }
  return b;
}

function maxi(a: Int, b: Int): Int {
  if a <= b {
    return b;
  }
  return a;
}

//Compute log likelihood for each site
function get_log_likes(msg: Matrix[Real]): Real {
    let stationary_probs = cvecCreate(4, [0.25,0.25,0.25,0.25]);
    let like = mtxMul(msg, stationary_probs);
    let log_like = log(mtxGet(1, 1, like));
    return log_like;
}

// KEY FUNCTION: CLUSTER
function cluster(q: Matrix[Real], trees: MsgTree[], maxAge: Real, seq_len: Int): MsgTree[] {

    let n = length(trees);

    // Check if we have reached the root of the tree
    if (eqi(n, 1)) {
        return trees;
    }

    // Randomly sample two indices in the trees vector with function pickpair
    // We will combine these, named left and right child
    let pairs = pickpair(n);
    let left_child = trees[pairs[1]];
    let right_child = trees[pairs[2]];

    // Get the age of the new internal node
    assume t ~ Exponential(10.0);
    let age = maxAge + t;

    // Get incoming messages from children
    let tmatrix_left = mtxTrans(mtxExp(mtxSclrMul(age-left_child.age, q)));
    let tmatrix_right = mtxTrans(mtxExp(mtxSclrMul(age-right_child.age, q)));

    let left_in_msg  = sapply1(left_child.msg, mtxMul, tmatrix_left);
    let right_in_msg = sapply1(right_child.msg, mtxMul, tmatrix_right);

    // Get the message of the new node.
    let node_msg = messageElemMul(left_in_msg, right_in_msg);

    // Weights
    let log_likes = sapply(node_msg, get_log_likes);
    logWeight (seqSumReal(log_likes));

    // Remove weights of previous internal children
    let log_likes_left = sapply(left_child.msg, get_log_likes);
    logWeight -(seqSumReal(log_likes_left));
    let log_likes_right = sapply(right_child.msg, get_log_likes);
    logWeight -(seqSumReal(log_likes_right));

    // Manual resample
    resample;

    // Combine picked pair of trees into a new node
    let parent = Node{age=age, msg=node_msg, left=left_child, right=right_child};

    // Compute new_trees list
    let min = mini(pairs[2],pairs[1]);
    let max = maxi(pairs[2],pairs[1]);
    let new_trees = paste0([slice(trees, 1, min), slice(trees, addi(min, 1), max), slice(trees, addi(max, 1), addi(n, 1)), [parent]]);

    // Recursive call to cluster for new_trees
    return cluster(q, new_trees, age, seq_len);
}

// MODEL FUNCTION

model function myModel(data: Int[][]) : MsgTree[] {
    // Define the scaled rate matrix for Jukes-Cantor
    let q = mtxCreate(4,4,
        [     -1.0, (1.0/3.0), (1.0/3.0), (1.0/3.0),
        (1.0/3.0),      -1.0, (1.0/3.0), (1.0/3.0),
        (1.0/3.0), (1.0/3.0),      -1.0, (1.0/3.0),
        (1.0/3.0), (1.0/3.0), (1.0/3.0),      -1.0]
        );

    let data_len = length(data);
    let seq_len =  length(data[1]);

    // Define the initial trees sequence (containing the leaves)
    let trees = build_forest(data, [], 1, data_len, seq_len);
    
    // Build the tree by random clustering and return
    return cluster(q, trees, 0.0, seq_len);
}
