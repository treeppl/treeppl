// TreePPL script for tree inference under the
// GTR model with a strict clock prior. Pruning currently hard-coded.

// Run this by compiling:
// tpplc models/phylo/phylogeny/tree_inference_pruning_gtr.tppl -m 'smc-apf' --resample align --output phylo_gtr
// Or if subsampling is desired, where n is the number of samples in putput:
// tpplc models/phylo/phylogeny/tree_inference_pruning_gtr.tppl -m 'smc-apf' --resample align --subsample -n 1 --output phylo_gtr
// And then execution 1000 particles 1 sweep, using for example toy dataset phylo_toydata.json:
// ./phylo_gtr models/data/treeinference/phylo_toydata.json 1000 1 > phylo_pruning_gtr.json

// Toy dataset as json file phylo_toydata.json.
// Data is a matrix with each row
// consisting of the aligned DNA sequence for a single
// taxon. The nucleotide is specified as
//   "A" for adenine  - 0
//   "C" for cytosine  - 1
//   "G" for guanine - 2
//   "T" for thymine - 3
//   "-" for gaps - 4 //To be extended

// TYPES

type MsgTree =
  | Leaf {age: Real, index: Int, msg: Matrix[Real][]}
  | Node {age: Real, msg: Matrix[Real][], left: MsgTree, right: MsgTree}


// FUNCTIONS

// A help function to compute the scaled rate matrix for GTR
function gtr(pi: Real[], r: Real[]) : Matrix[Real] {
    // Construct a matrix of exchangeability rates
    let unscaled_q = mtxCreate(4,4,
                     [ -(pi[2]*r[1]+pi[3]*r[2]+pi[4]*r[3]),      pi[2]*r[1],                            pi[3]*r[2],                             pi[4]*r[3] ,
                        pi[1]*r[1],                             -(pi[1]*r[1]+pi[3]*r[4]+pi[4]*r[5]),    pi[3]*r[4],                             pi[4]*r[5] ,
                        pi[1]*r[2],                             pi[2]*r[4],                             -(pi[1]*r[2]+pi[2]*r[4]+pi[4]*r[6]),    pi[4]*r[6] ,
                        pi[1]*r[3],                              pi[2]*r[5],                            pi[3]*r[6],                            -(pi[1]*r[3]+pi[2]*r[5]+pi[3]*r[6])
                    ]);

    let scaler_1 = -(mtxGet(1, 1, unscaled_q) * pi[1]);
    let scaler_2 = -(mtxGet(2, 2, unscaled_q) * pi[2]);
    let scaler_3 = -(mtxGet(3, 3, unscaled_q) * pi[3]);
    let scaler_4 = -(mtxGet(4, 4, unscaled_q) * pi[4]);
    let scaler = scaler_1 + scaler_2 + scaler_3 + scaler_4;

   return mtxSclrMul((1.0/scaler), unscaled_q);
}

// Randomly sample two indices in the trees vector, to be combined. Avoiding mirror cases.
function pickpair(n: Int): Int[] {
    assume i_1 ~ Categorical(rep(subi(n, 1), 1./Real(subi(n, 1))));
    let i = addi(i_1, 2); //Adding two, avoiding index zero for i and avoiding trouble picking j
    assume j ~ Categorical(rep(subi(i, 1), 1./Real(subi(i, 1))));  // j is always smaller than i, avoiding mirror cases
    return [i, addi(j, 1)]; //avoid index of zero for j
}

// Build forest of trees from leaves, recursively
function build_forest(data: Int[][], forest: MsgTree[], index: Int, data_len: Int, seq_len: Int): MsgTree[] {
    let new_message = sapply(data[index], get_leaf_message);
    let new_leaf = Leaf{age = 0.0, index = index, msg =  new_message};
    let new_forest = paste0([forest, [new_leaf]]);
    if (eqi(data_len, index)) {
        return new_forest;
    }
    else {
        return build_forest(data, new_forest, addi(index, 1), data_len, seq_len);
    }
}

// Get message from leaves for each site
function get_leaf_message(seq: Int) : Matrix[Real] {
    if (eqi(seq, 0)) { // "A"
       let message = rvecCreate(4, [1.0, 0.0, 0.0, 0.0]);
        return message;
    }
    if (eqi(seq, 1)) { // "C"
        let message = rvecCreate(4, [0.0, 1.0, 0.0, 0.0]);
        return message;
    }
    if (eqi(seq, 2)) { // "G"
        let message = rvecCreate(4, [0.0, 0.0, 1.0, 0.0]);
        return message;
    }
    if (eqi(seq, 3)) {  // "T"
        let message = rvecCreate(4, [0.0, 0.0, 0.0, 1.0]);
        return message;
    }
    if (eqi(seq, 4)) {  // "-"
        let message = rvecCreate(4, [1.0, 1.0, 1.0, 1.0]);
        return message;
    }
    else {
        return error("Invalid state at leaf");
    }
}

//Compute log likelihood for each site
function get_log_likes(msg: Matrix[Real], pi: Real[]): Real {
    let stationary_probs = cvecCreate(4, pi);
    let like = mtxMul(msg, stationary_probs);
    let log_like = log(mtxGet(1, 1, like));
    return log_like;
}

// KEY FUNCTION: CLUSTER
function cluster(q: Matrix[Real], trees: MsgTree[], maxAge: Real, seq_len: Int, pi: Real[]): MsgTree[] {

    let n = length(trees);

    // Check if we have reached the root of the tree
    if (eqi(n, 1)) {
        return trees;
    }

    // Randomly sample two indices in the trees vector with function pickpair
    // We will combine these, named left and right child
    let pairs = pickpair(n);
    let left_child = trees[pairs[1]];
    let right_child = trees[pairs[2]];

    // Get the age of the new internal node
    assume t ~ Exponential(10.0);
    let age = maxAge + t;

    // Get incoming messages from children
    let tmatrix_left = mtxTrans(mtxExp(mtxSclrMul(age-left_child.age, q)));
    let tmatrix_right = mtxTrans(mtxExp(mtxSclrMul(age-right_child.age, q)));

    let left_in_msg  = sapply1(left_child.msg, mtxMul, tmatrix_left);
    let right_in_msg = sapply1(right_child.msg, mtxMul, tmatrix_right);

    // Get the message of the new node.
    let node_msg = messageElemMul(left_in_msg, right_in_msg);

    // Weights
    let log_likes = sapply1(node_msg, get_log_likes, pi);
    logWeight (seqSumReal(log_likes));

    // Remove weights of previous internal nodes
    if (left_child is Node) {
        let log_likes_left = sapply1(left_child.msg, get_log_likes, pi);
        logWeight -(seqSumReal(log_likes_left));
    }
    if (right_child is Node) {
        let log_likes_right = sapply1(right_child.msg, get_log_likes, pi);
        logWeight -(seqSumReal(log_likes_right));
    }

    // Combine picked pair of trees into a new node
    let parent = Node{age=age, msg=node_msg, left=left_child, right=right_child};

    // Compute new_trees list
    let min = pairs[2];
    let max = pairs[1];
    let new_trees = paste0([slice(trees, 1, min), slice(trees, addi(min, 1), max), slice(trees, addi(max, 1), addi(n, 1)), [parent]]);

    // Recursive call to cluster for new_trees
    return cluster(q, new_trees, age, seq_len, pi);
}

// MODEL FUNCTION

model function myModel(data: Int[][]) : MsgTree[] {
    // Sample stationary probs and exchangeability rates [r_AC, r_AG, r_AT, r_CG, r_CT, r_GT]
    assume pi ~ Dirichlet([1.0, 1.0, 1.0, 1.0]);
    assume er ~  Dirichlet([1.0, 1.0, 1.0, 1.0, 1.0, 1.0]);

    let q = gtr(pi, er);

    let data_len = length(data);
    let seq_len =  length(data[1]);

    // Define the initial trees sequence (containing the leaves)
    let trees = build_forest(data, [], 1, data_len, seq_len);

    // Build the tree by random clustering and return
    return cluster(q, trees, 0.0, seq_len, pi);
}
